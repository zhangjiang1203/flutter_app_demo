import 'dart:math';

/// 定义类  实例化
/// 成员变量表示一个类又那些数据
/// 成员方法表示一个类又那些功能
class Vec2 {
  /// 成员变量
  double x;
  double y;

  // String name;

  /// get与 set关键字修饰的是成员方法，其本质上就是他们的一种简写方式，常用于对变量的维护
  /// get声明的方法 在调用的时候不用加(),就像是属性的调用一样，这只是一个语法糖，本质上仍是方法
  /// set关键字也是一样，可以像对属性赋值一样触发方法
  double get length => sqrt(x * x + y * y);

  /// 成员方法
  String getPrint() => "Vec2($x,$y)";

  set name(String value){
    name = value;
  }


  // 构造方法1
  // Vec2(this.x,this.y);
  /// 构造方法2 常用于对成员变量的初始化
  /// this关键字用于指代当前对象，
  Vec2(double x,double y) : this.x = x, this.y = y;

  /// dart中多个参数使用命名参数，命名参数是选填的，非空类型的成员必须提供一个默认值，如果没有提供默认值必须提供一个方案保证该成员被初始化
  /// final 关键字修饰的成员只能被赋值一次，一般在初始化的时候赋值，当再次对实例成员修改时，会报错
  /// static 关键字表示一个静态成员，该成员由类访问，不依附与对象，静态成员变量是可以被修改的，
  /// 修饰方式 称为静态方法 通过类直接调用，静态方法中不能访问普通成员变量/方法，
  ///
  ///
  /// Dart中通过_来限制成员的访问权限，对一些不想暴露方法或者成员变量可以通过这种方式进行权限设置
  /// 另外 我们可以提供一个get方法 来访问私有变量  set 方法 对私有成员进行修改
  ///
  /// 1.类之间的关系
  /// 1.依赖关系
  /// B类实现功能逻辑中，使用到A类对象，称B依赖于A， 该关系比较薄弱
  ///
  /// 2.关联关系
  /// 指两类之间存在固定的对应关系，相对于依赖而言，关系更强，B 持有 A 以成员变量的形式在关联者中
  ///
  /// 3.聚合关系
  /// 聚合是一种藕合性更强的关联关系，一般关联关系的两个类，是相互独立的，在地位上是平等的，聚合关系在语义上有包含的关系，更强调整体和个体的区别，
  ///
  /// 4.组合关系
  /// 组合是一种比藕合性比聚合更强的关联关系，同样强调整体和个体间的关系，但要求整体和个体不可分割，这个不可分割体现在个体的生命周期被整体控制，整体对象的消亡，也会导致个体的消亡。
  ///
  /// 总的来看，封装 是 继承 的基础、继承 是 多态 的前提、而 多态 丰富 封装 的内容
}



void main() {
  Vec2 p0 = Vec2(30,80);
  print(p0.getPrint());


  p0.x = 40;
  print(p0.getPrint());

  print(p0.length);
}